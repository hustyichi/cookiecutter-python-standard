[tool.poetry]
authors = ["{{cookiecutter.authors}}"]
description = "{{cookiecutter.description}}"
name = "app"
version = "{{cookiecutter.version}}"

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.dev-dependencies]
black = "^20.8b1"
coverage = "^5.3"
isort = "^5.6.4"
mypy = "^0.790"
pylint = "^2.6.0"
pytest = "^6.1.2"
pytest-cov = "^2.10.1"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.pylint.master]
job = 0
suggestion-mode = "yes"

[tool.pylint.format]
max-line-length = 120

[tool.pylint.basic]
argument-naming-style = "any"
attr-naming-style = "any"
function-naming-style = "any"
variable-naming-style = "any"

[tool.pylint.message_control]
disable = ["missing-docstring", "logging-fstring-interpolation"]

[tool.pylint.design]
min-public-methods = 0

[tool.pytest.ini_options]
addopts = " -svv --cov=app"
minversion = "6.0"
testpaths = [
  "tests",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]
fail_under = 60.0
show_missing = true
skip_covered = true
skip_empty = true
sort = "miss"

[tool.coverage.path]
source = "app"

[tool.black]
line-length = 120

[tool.isort]
include_trailing_comma = true
line_length = 120
multi_line_output = 3
profile = "black"
src_paths = ["app", "tests"]
use_parentheses = true
